From bb67a2cd88bcb88b5e34185f3b7221e300e1e70c Mon Sep 17 00:00:00 2001
From: darkraven <drdarkraven@gmail.com>
Date: Thu, 6 Sep 2012 23:06:44 +0800
Subject: [PATCH 1/4] split children rendering part of code out of
 render_con().

---
 src/render.c | 303 +++++++++++++++++++++++++++++++----------------------------
 1 file changed, 160 insertions(+), 143 deletions(-)

diff --git a/src/render.c b/src/render.c
index 01628c3..16905f4 100644
--- a/src/render.c
+++ b/src/render.c
@@ -98,19 +98,12 @@ static void render_l_output(Con *con) {
     }
 }
 
-/*
- * "Renders" the given container (and its children), meaning that all rects are
- * updated correctly. Note that this function does not call any xcb_*
- * functions, so the changes are completely done in memory only (and
- * side-effect free). As soon as you call x_push_changes(), the changes will be
- * updated in X11.
- *
- */
-void render_con(Con *con, bool render_fullscreen) {
+/* Render all children of a given con */
+void render_child(Con *con) {
+    Con *child;
+
     int children = con_num_children(con);
-    DLOG("Rendering %snode %p / %s / layout %d / children %d\n",
-         (render_fullscreen ? "fullscreen " : ""), con, con->name, con->layout,
-         children);
+    assert(TAILQ_FIRST(&con->nodes_head) == NULL || children > 0);
 
     /* Copy container rect, subtract container border */
     /* This is the actually usable space inside this container for clients */
@@ -130,79 +123,6 @@ void render_con(Con *con, bool render_fullscreen) {
 
     int i = 0;
 
-    con->mapped = true;
-
-    /* if this container contains a window, set the coordinates */
-    if (con->window) {
-        /* depending on the border style, the rect of the child window
-         * needs to be smaller */
-        Rect *inset = &(con->window_rect);
-        *inset = (Rect){0, 0, con->rect.width, con->rect.height};
-        if (!render_fullscreen)
-            *inset = rect_add(*inset, con_border_style_rect(con));
-
-        /* Obey x11 border */
-        inset->width -= (2 * con->border_width);
-        inset->height -= (2 * con->border_width);
-
-        /* Obey the aspect ratio, if any, unless we are in fullscreen mode.
-         *
-         * The spec isn’t explicit on whether the aspect ratio hints should be
-         * respected during fullscreen mode. Other WMs such as Openbox don’t do
-         * that, and this post suggests that this is the correct way to do it:
-         * http://mail.gnome.org/archives/wm-spec-list/2003-May/msg00007.html
-         *
-         * Ignoring aspect ratio during fullscreen was necessary to fix MPlayer
-         * subtitle rendering, see http://bugs.i3wm.org/594 */
-        if (!render_fullscreen &&
-            con->proportional_height != 0 &&
-            con->proportional_width != 0) {
-            double new_height = inset->height + 1;
-            int new_width = inset->width;
-
-            while (new_height > inset->height) {
-                new_height = ((double)con->proportional_height / con->proportional_width) * new_width;
-
-                if (new_height > inset->height)
-                    new_width--;
-            }
-            /* Center the window */
-            inset->y += ceil(inset->height / 2) - floor(new_height / 2);
-            inset->x += ceil(inset->width / 2) - floor(new_width / 2);
-
-            inset->height = new_height;
-            inset->width = new_width;
-        }
-
-        if (con->height_increment > 1) {
-            int old_height = inset->height;
-            inset->height -= (inset->height - con->base_height) % con->height_increment;
-            DLOG("Lost %d pixel due to client's height_increment (%d px, base_height = %d)\n",
-                old_height - inset->height, con->height_increment, con->base_height);
-        }
-
-        if (con->width_increment > 1) {
-            int old_width = inset->width;
-            inset->width -= (inset->width - con->base_width) % con->width_increment;
-            DLOG("Lost %d pixel due to client's width_increment (%d px, base_width = %d)\n",
-                old_width - inset->width, con->width_increment, con->base_width);
-        }
-
-        DLOG("child will be at %dx%d with size %dx%d\n", inset->x, inset->y, inset->width, inset->height);
-    }
-
-    /* Check for fullscreen nodes */
-    Con *fullscreen = NULL;
-    if (con->type != CT_OUTPUT) {
-        fullscreen = con_get_fullscreen_con(con, (con->type == CT_ROOT ? CF_GLOBAL : CF_OUTPUT));
-    }
-    if (fullscreen) {
-        fullscreen->rect = rect;
-        x_raise_con(fullscreen);
-        render_con(fullscreen, true);
-        return;
-    }
-
     /* find the height for the decorations */
     int deco_height = config.font.height + 4;
     if (config.font.height & 0x01)
@@ -231,65 +151,7 @@ void render_con(Con *con, bool render_fullscreen) {
         }
     }
 
-    if (con->layout == L_OUTPUT) {
-        /* Skip i3-internal outputs */
-        if (con->name[0] == '_' && con->name[1] == '_')
-            return;
-        render_l_output(con);
-    } else if (con->type == CT_ROOT) {
-        Con *output;
-        TAILQ_FOREACH(output, &(con->nodes_head), nodes) {
-            render_con(output, false);
-        }
-
-        /* We need to render floating windows after rendering all outputs’
-         * tiling windows because they need to be on top of *every* output at
-         * all times. This is important when the user places floating
-         * windows/containers so that they overlap on another output. */
-        DLOG("Rendering floating windows:\n");
-        TAILQ_FOREACH(output, &(con->nodes_head), nodes) {
-            if (output->name[0] == '_' && output->name[1] == '_')
-                continue;
-            /* Get the active workspace of that output */
-            Con *content = output_get_content(output);
-            Con *workspace = TAILQ_FIRST(&(content->focus_head));
-
-            /* Check for (floating!) fullscreen nodes */
-            /* XXX: This code duplication is unfortunate. Keep in mind to fix
-             * this when we clean up the whole render.c */
-            Con *fullscreen = NULL;
-            fullscreen = con_get_fullscreen_con(workspace, CF_OUTPUT);
-            if (fullscreen) {
-                /* Either the fullscreen window is inside the floating
-                 * container, then we need to render and raise it now… */
-                if (con_inside_floating(fullscreen)) {
-                    fullscreen->rect = output->rect;
-                    x_raise_con(fullscreen);
-                    render_con(fullscreen, true);
-                    continue;
-                } else {
-                    /* …or it’s a tiling window, in which case the floating
-                     * windows should not overlap it, so we skip rendering this
-                     * output. */
-                    continue;
-                }
-            }
-
-            Con *child;
-            TAILQ_FOREACH(child, &(workspace->floating_head), floating_windows) {
-                DLOG("floating child at (%d,%d) with %d x %d\n", child->rect.x, child->rect.y, child->rect.width, child->rect.height);
-                x_raise_con(child);
-                render_con(child, false);
-            }
-        }
-
-    } else {
-
-        /* FIXME: refactor this into separate functions: */
-    Con *child;
     TAILQ_FOREACH(child, &(con->nodes_head), nodes) {
-        assert(children > 0);
-
         /* default layout */
         if (con->layout == L_SPLITH || con->layout == L_SPLITV) {
             if (con->layout == L_SPLITH) {
@@ -398,5 +260,160 @@ void render_con(Con *con, bool render_fullscreen) {
              * (it’s unmapped afterwards). */
             x_raise_con(con);
     }
+}
+
+/*
+ * "Renders" the given container (and its children), meaning that all rects are
+ * updated correctly. Note that this function does not call any xcb_*
+ * functions, so the changes are completely done in memory only (and
+ * side-effect free). As soon as you call x_push_changes(), the changes will be
+ * updated in X11.
+ *
+ */
+void render_con(Con *con, bool render_fullscreen) {
+    int children = con_num_children(con);
+    DLOG("Rendering %snode %p / %s / layout %d / children %d\n",
+         (render_fullscreen ? "fullscreen " : ""), con, con->name, con->layout,
+         children);
+
+    /* Copy container rect, subtract container border */
+    /* This is the actually usable space inside this container for clients */
+    Rect rect = con->rect;
+
+    /* Display a border if this is a leaf node. For container nodes, we don’t
+     * draw borders (except when in debug mode) */
+    if (show_debug_borders) {
+        rect.x += 2;
+        rect.y += 2;
+        rect.width -= 2 * 2;
+        rect.height -= 2 * 2;
     }
+
+    con->mapped = true;
+
+    /* if this container contains a window, set the coordinates */
+    if (con->window) {
+        /* depending on the border style, the rect of the child window
+         * needs to be smaller */
+        Rect *inset = &(con->window_rect);
+        *inset = (Rect){0, 0, con->rect.width, con->rect.height};
+        if (!render_fullscreen)
+            *inset = rect_add(*inset, con_border_style_rect(con));
+
+        /* Obey x11 border */
+        inset->width -= (2 * con->border_width);
+        inset->height -= (2 * con->border_width);
+
+        /* Obey the aspect ratio, if any, unless we are in fullscreen mode.
+         *
+         * The spec isn’t explicit on whether the aspect ratio hints should be
+         * respected during fullscreen mode. Other WMs such as Openbox don’t do
+         * that, and this post suggests that this is the correct way to do it:
+         * http://mail.gnome.org/archives/wm-spec-list/2003-May/msg00007.html
+         *
+         * Ignoring aspect ratio during fullscreen was necessary to fix MPlayer
+         * subtitle rendering, see http://bugs.i3wm.org/594 */
+        if (!render_fullscreen &&
+            con->proportional_height != 0 &&
+            con->proportional_width != 0) {
+            double new_height = inset->height + 1;
+            int new_width = inset->width;
+
+            while (new_height > inset->height) {
+                new_height = ((double)con->proportional_height / con->proportional_width) * new_width;
+
+                if (new_height > inset->height)
+                    new_width--;
+            }
+            /* Center the window */
+            inset->y += ceil(inset->height / 2) - floor(new_height / 2);
+            inset->x += ceil(inset->width / 2) - floor(new_width / 2);
+
+            inset->height = new_height;
+            inset->width = new_width;
+        }
+
+        if (con->height_increment > 1) {
+            int old_height = inset->height;
+            inset->height -= (inset->height - con->base_height) % con->height_increment;
+            DLOG("Lost %d pixel due to client's height_increment (%d px, base_height = %d)\n",
+                old_height - inset->height, con->height_increment, con->base_height);
+        }
+
+        if (con->width_increment > 1) {
+            int old_width = inset->width;
+            inset->width -= (inset->width - con->base_width) % con->width_increment;
+            DLOG("Lost %d pixel due to client's width_increment (%d px, base_width = %d)\n",
+                old_width - inset->width, con->width_increment, con->base_width);
+        }
+
+        DLOG("child will be at %dx%d with size %dx%d\n", inset->x, inset->y, inset->width, inset->height);
+    }
+
+    /* Check for fullscreen nodes */
+    Con *fullscreen = NULL;
+    if (con->type != CT_OUTPUT) {
+        fullscreen = con_get_fullscreen_con(con, (con->type == CT_ROOT ? CF_GLOBAL : CF_OUTPUT));
+    }
+    if (fullscreen) {
+        fullscreen->rect = rect;
+        x_raise_con(fullscreen);
+        render_con(fullscreen, true);
+        return;
+    }
+
+    if (con->layout == L_OUTPUT) {
+        /* Skip i3-internal outputs */
+        if (con->name[0] == '_' && con->name[1] == '_')
+            return;
+        render_l_output(con);
+    } else if (con->type == CT_ROOT) {
+        Con *output;
+        TAILQ_FOREACH(output, &(con->nodes_head), nodes) {
+            render_con(output, false);
+        }
+
+        /* We need to render floating windows after rendering all outputs’
+         * tiling windows because they need to be on top of *every* output at
+         * all times. This is important when the user places floating
+         * windows/containers so that they overlap on another output. */
+        DLOG("Rendering floating windows:\n");
+        TAILQ_FOREACH(output, &(con->nodes_head), nodes) {
+            if (output->name[0] == '_' && output->name[1] == '_')
+                continue;
+            /* Get the active workspace of that output */
+            Con *content = output_get_content(output);
+            Con *workspace = TAILQ_FIRST(&(content->focus_head));
+
+            /* Check for (floating!) fullscreen nodes */
+            /* XXX: This code duplication is unfortunate. Keep in mind to fix
+             * this when we clean up the whole render.c */
+            Con *fullscreen = NULL;
+            fullscreen = con_get_fullscreen_con(workspace, CF_OUTPUT);
+            if (fullscreen) {
+                /* Either the fullscreen window is inside the floating
+                 * container, then we need to render and raise it now… */
+                if (con_inside_floating(fullscreen)) {
+                    fullscreen->rect = output->rect;
+                    x_raise_con(fullscreen);
+                    render_con(fullscreen, true);
+                    continue;
+                } else {
+                    /* …or it’s a tiling window, in which case the floating
+                     * windows should not overlap it, so we skip rendering this
+                     * output. */
+                    continue;
+                }
+            }
+
+            Con *child;
+            TAILQ_FOREACH(child, &(workspace->floating_head), floating_windows) {
+                DLOG("floating child at (%d,%d) with %d x %d\n", child->rect.x, child->rect.y, child->rect.width, child->rect.height);
+                x_raise_con(child);
+                render_con(child, false);
+            }
+        }
+
+    } else
+        render_child(con);
 }
-- 
1.7.12

